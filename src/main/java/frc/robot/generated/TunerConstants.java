package frc.robot.generated;

import static edu.wpi.first.units.Units.*;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.*;
import com.ctre.phoenix6.signals.*;
import com.ctre.phoenix6.swerve.*;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.*;
import edu.wpi.first.units.measure.*;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerRequestType control request with
  // the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput

  // Swerve Steer PID Values, moved so they can be reached by simulator
  public static final double kSteerP = 65;
  public static final double kSteerI = 0;
  public static final double kSteerD = 0.5;
  public static final double kSteerS = 0;
  public static final double kSteerV = 0;
  public static final double kSteerA = 0;
  public static final StaticFeedforwardSignValue kStaticFeedforwardSign =
      StaticFeedforwardSignValue.UseClosedLoopSign;

  // Swerve Drive PID Values
  public static final double kDriveP = 0.03152 * (180 / Math.PI) * 2 * 0.0254;
  public static final double kDriveI = 0;
  public static final double kDriveD = 0;
  public static final double kDriveS = 0.28949;
  public static final double kDriveV = 0.11353 * (180 / Math.PI) * 2 * 0.0254;
  public static final double kDriveA = 0.083369 * (180 / Math.PI) * 2 * 0.0254;

  private static final Slot0Configs steerGains =
      new Slot0Configs()
          .withKP(kSteerP)
          .withKI(kSteerI)
          .withKD(kSteerD)
          .withKS(kSteerS)
          .withKV(kSteerV)
          .withKA(kSteerA)
          .withStaticFeedforwardSign(kStaticFeedforwardSign);
  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
  private static final Slot0Configs driveGains =
      new Slot0Configs()
          .withKP(kDriveP)
          .withKI(kDriveI)
          .withKD(kDriveD)
          .withKS(kDriveS)
          .withKV(kDriveV)
          .withKA(kDriveA);

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  private static final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  private static final ClosedLoopOutputType kDriveClosedLoopOutput = ClosedLoopOutputType.Voltage;

  // The type of motor used for the drive motor
  private static final DriveMotorArrangement kDriveMotorType =
      DriveMotorArrangement.TalonFX_Integrated;
  // The type of motor used for the drive motor
  private static final SteerMotorArrangement kSteerMotorType =
      SteerMotorArrangement.TalonFX_Integrated;

  // The remote sensor feedback type to use for the steer motors;
  // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to
  // RemoteCANcoder
  private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  private static final Current kSlipCurrent = Amps.of(130.0);

  // Initial configs for the drive and steer motors and the azimuth encoder; these
  // cannot be null.
  // Some configs will be overwritten; check the `with*InitialConfigs()` API
  // documentation.
  private static final TalonFXConfiguration driveInitialConfigs =
      new TalonFXConfiguration()
          .withCurrentLimits(
              new CurrentLimitsConfigs()
                  .withSupplyCurrentLimitEnable(true)
                  .withSupplyCurrentLimit(Amps.of(60))
                  .withStatorCurrentLimitEnable(true)
                  .withStatorCurrentLimit(kSlipCurrent))
          .withMotorOutput(
              new MotorOutputConfigs().withNeutralMode(NeutralModeValue.Coast)); // REMOVE LATER
  private static final TalonFXConfiguration steerInitialConfigs =
      new TalonFXConfiguration()
          .withCurrentLimits(
              new CurrentLimitsConfigs()
                  // Swerve azimuth does not require much torque output, so we can set a
                  // relatively
                  // low
                  // stator current limit to help avoid brownouts without impacting performance.
                  .withStatorCurrentLimit(Amps.of(60))
                  .withStatorCurrentLimitEnable(true))
          .withMotorOutput(new MotorOutputConfigs().withNeutralMode(NeutralModeValue.Coast));
  private static final CANcoderConfiguration encoderInitialConfigs = new CANcoderConfiguration();
  // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
  private static final Pigeon2Configuration pigeonConfigs = new Pigeon2Configuration();

  // CAN bus that the devices are located on;
  // All swerve devices must share the same CAN bus
  public static final CANBus kCANBus = new CANBus("drive", "./logs/example.hoot");

  // Theoretical free speed (m/s) at 12 V applied output;
  // This needs to be tuned to your individual robot
  public static final LinearVelocity kSpeedAt12Volts = MetersPerSecond.of(7.50);

  // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
  // This may need to be tuned to your individual robot
  public static final double kCoupleRatio = 5.4;

  public static final double kDriveGearRatio = 5.89;
  public static final double kSteerGearRatio = 12.1 / 1;
  public static final Distance kWheelRadius = Inches.of(2.15);

  public static final boolean kInvertLeftSide = false;
  public static final boolean kInvertRightSide = true;

  public static final int kPigeonId = 21;

  // These are only used for simulation
  public static final MomentOfInertia kSteerInertia = KilogramSquareMeters.of(0.01);
  public static final MomentOfInertia kDriveInertia = KilogramSquareMeters.of(0.01);
  // Simulated voltage necessary to overcome friction
  public static final Voltage kSteerFrictionVoltage = Volts.of(0.2);
  public static final Voltage kDriveFrictionVoltage = Volts.of(0.2);

  public static final SwerveDrivetrainConstants DrivetrainConstants =
      new SwerveDrivetrainConstants()
          .withCANBusName(kCANBus.getName())
          .withPigeon2Id(kPigeonId)
          .withPigeon2Configs(pigeonConfigs);

  private static final SwerveModuleConstantsFactory<
          TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
      ConstantCreator =
          new SwerveModuleConstantsFactory<
                  TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
              .withDriveMotorGearRatio(kDriveGearRatio)
              .withSteerMotorGearRatio(kSteerGearRatio)
              .withCouplingGearRatio(kCoupleRatio)
              .withWheelRadius(kWheelRadius)
              .withSteerMotorGains(steerGains)
              .withDriveMotorGains(driveGains)
              .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
              .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
              .withSlipCurrent(kSlipCurrent)
              .withSpeedAt12Volts(kSpeedAt12Volts)
              .withDriveMotorType(kDriveMotorType)
              .withSteerMotorType(kSteerMotorType)
              .withFeedbackSource(kSteerFeedbackType)
              .withDriveMotorInitialConfigs(driveInitialConfigs)
              .withSteerMotorInitialConfigs(steerInitialConfigs)
              .withEncoderInitialConfigs(encoderInitialConfigs)
              .withSteerInertia(kSteerInertia)
              .withDriveInertia(kDriveInertia)
              .withSteerFrictionVoltage(kSteerFrictionVoltage)
              .withDriveFrictionVoltage(kDriveFrictionVoltage);

  // Front Left
  private static final int kFrontLeftDriveMotorId = 2;
  private static final int kFrontLeftSteerMotorId = 1;
  private static final int kFrontLeftEncoderId = 9;
  private static final Angle kFrontLeftEncoderOffset = Rotations.of(-0.388671875);
  private static final boolean kFrontLeftSteerMotorInverted = true;
  private static final boolean kFrontLeftEncoderInverted = false;

  private static final Distance kFrontLeftXPos = Inches.of(13.5);
  private static final Distance kFrontLeftYPos = Inches.of(13.5);

  // Front Right
  private static final int kFrontRightDriveMotorId = 4;
  private static final int kFrontRightSteerMotorId = 3;
  private static final int kFrontRightEncoderId = 10;
  private static final Angle kFrontRightEncoderOffset = Rotations.of(0.142822265625 - 0.5);
  private static final boolean kFrontRightSteerMotorInverted = true;
  private static final boolean kFrontRightEncoderInverted = false;

  private static final Distance kFrontRightXPos = Inches.of(13.5);
  private static final Distance kFrontRightYPos = Inches.of(-13.5);

  // Back Left
  private static final int kBackLeftDriveMotorId = 6;
  private static final int kBackLeftSteerMotorId = 5;
  private static final int kBackLeftEncoderId = 11;
  private static final Angle kBackLeftEncoderOffset = Rotations.of(0.3701171875 - 0.5);
  private static final boolean kBackLeftSteerMotorInverted = true;
  private static final boolean kBackLeftEncoderInverted = false;

  private static final Distance kBackLeftXPos = Inches.of(-13.5);
  private static final Distance kBackLeftYPos = Inches.of(13.5);

  // Back Right
  private static final int kBackRightDriveMotorId = 8;
  private static final int kBackRightSteerMotorId = 7;
  private static final int kBackRightEncoderId = 12;
  private static final Angle kBackRightEncoderOffset = Rotations.of(-0.48486328125 - 0.5);
  private static final boolean kBackRightSteerMotorInverted = true;
  private static final boolean kBackRightEncoderInverted = false;

  private static final Distance kBackRightXPos = Inches.of(-13.5);
  private static final Distance kBackRightYPos = Inches.of(-13.5);

  public static final SwerveModuleConstants<
          TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
      FrontLeft =
          ConstantCreator.createModuleConstants(
                  kFrontLeftSteerMotorId,
                  kFrontLeftDriveMotorId,
                  kFrontLeftEncoderId,
                  kFrontLeftEncoderOffset,
                  kFrontLeftXPos,
                  kFrontLeftYPos,
                  kInvertLeftSide,
                  kFrontLeftSteerMotorInverted,
                  kFrontLeftEncoderInverted)
              .withSlipCurrent(kSlipCurrent);
  public static final SwerveModuleConstants<
          TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
      FrontRight =
          ConstantCreator.createModuleConstants(
                  kFrontRightSteerMotorId,
                  kFrontRightDriveMotorId,
                  kFrontRightEncoderId,
                  kFrontRightEncoderOffset,
                  kFrontRightXPos,
                  kFrontRightYPos,
                  kInvertRightSide,
                  kFrontRightSteerMotorInverted,
                  kFrontRightEncoderInverted)
              .withSlipCurrent(kSlipCurrent);
  public static final SwerveModuleConstants<
          TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
      BackLeft =
          ConstantCreator.createModuleConstants(
                  kBackLeftSteerMotorId,
                  kBackLeftDriveMotorId,
                  kBackLeftEncoderId,
                  kBackLeftEncoderOffset,
                  kBackLeftXPos,
                  kBackLeftYPos,
                  kInvertLeftSide,
                  kBackLeftSteerMotorInverted,
                  kBackLeftEncoderInverted)
              .withSlipCurrent(kSlipCurrent);
  public static final SwerveModuleConstants<
          TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
      BackRight =
          ConstantCreator.createModuleConstants(
                  kBackRightSteerMotorId,
                  kBackRightDriveMotorId,
                  kBackRightEncoderId,
                  kBackRightEncoderOffset,
                  kBackRightXPos,
                  kBackRightYPos,
                  kInvertRightSide,
                  kBackRightSteerMotorInverted,
                  kBackRightEncoderInverted)
              .withSlipCurrent(kSlipCurrent);

  /**
   * Creates a CommandSwerveDrivetrain instance. This should only be called once in your robot
   * program,.
   */

  /** Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types. */
}
